package gg.codie.mineonline.gui.rendering.components;

import gg.codie.mineonline.gui.rendering.*;
import gg.codie.mineonline.gui.rendering.models.RawModel;
import gg.codie.mineonline.gui.rendering.models.TexturedModel;
import gg.codie.mineonline.gui.rendering.shaders.GUIShader;
import gg.codie.mineonline.gui.rendering.textures.ModelTexture;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import java.util.LinkedList;

public class SelectableVersionList extends GUIObject {

    GUIObject scrollBarBackground;
    GUIObject scrollBar;
    GUIObject background;

    public SelectableVersionList(String name, Vector3f localPosition, Vector3f rotation, Vector3f scale) {
        super(name, localPosition, rotation, scale);

        float viewportHeight = DisplayManager.scaledHeight(DisplayManager.getDefaultHeight() - 138);

        RawModel scrollBackgroundModel = Loader.singleton.loadGUIToVAO(new Vector2f(DisplayManager.scaledWidth((DisplayManager.getDefaultWidth() / 2) + 240), DisplayManager.scaledHeight(69) + DisplayManager.getYBuffer()), new Vector2f(DisplayManager.scaledWidth(10), viewportHeight), TextureHelper.getPlaneTextureCoords(new Vector2f(512, 512), new Vector2f(0, 129), new Vector2f(1, 1)));
        ModelTexture scrollBackgroundTexture = new ModelTexture(Loader.singleton.loadTexture(PlayerRendererTest.class.getResource("/img/gui.png")));
        TexturedModel texuredScrollBackgroundModel =  new TexturedModel(scrollBackgroundModel, scrollBackgroundTexture);
        scrollBarBackground = new GUIObject("scroll", texuredScrollBackgroundModel, new Vector3f(), new Vector3f(), new Vector3f(1, 1, 1));

        RawModel scrollModel = Loader.singleton.loadGUIToVAO(new Vector2f(DisplayManager.scaledWidth((DisplayManager.getDefaultWidth() / 2) + 240), DisplayManager.scaledHeight(69) + DisplayManager.getYBuffer()), new Vector2f(DisplayManager.scaledWidth(10), viewportHeight), TextureHelper.getPlaneTextureCoords(new Vector2f(512, 512), new Vector2f(1, 129), new Vector2f(1, 1)));
        ModelTexture scrollTexture = new ModelTexture(Loader.singleton.loadTexture(PlayerRendererTest.class.getResource("/img/gui.png")));
        TexturedModel texuredScrollModel =  new TexturedModel(scrollModel, scrollTexture);
        scrollBar = new GUIObject("scroll", texuredScrollModel, new Vector3f(), new Vector3f(), new Vector3f(1, 1, 1));

        RawModel backgroundModel = Loader.singleton.loadGUIToVAO(new Vector2f(0, DisplayManager.scaledHeight(69) + DisplayManager.getYBuffer()), new Vector2f(Display.getWidth(), DisplayManager.scaledHeight(DisplayManager.getDefaultHeight() - (69 * 2))), TextureHelper.getYFlippedPlaneTextureCoords(new Vector2f(512, 512), new Vector2f(0, 129), new Vector2f(1, 1)));
        ModelTexture backgroundTexture = new ModelTexture(Loader.singleton.loadTexture(PlayerRendererTest.class.getResource("/img/gui.png")));
        TexturedModel texuredBackgroundModel =  new TexturedModel(backgroundModel, backgroundTexture);
        background = new GUIObject("background", texuredBackgroundModel, new Vector3f(), new Vector3f(), new Vector3f(1, 1, 1));
    }

    public void addVersion(String name, String path) {
        int buffer = (72) * getVersions().size();
        super.addChild(
            new SelectableVersion(path, new Vector2f((DisplayManager.getDefaultWidth() / 2) - 220, DisplayManager.scaledHeight(140 + buffer)), name, path, this)
        );

        resize();
    }

    public LinkedList<SelectableVersion> getVersions() {
        LinkedList<SelectableVersion> guiObjects = new LinkedList<>();
        for(Object obj: super.getChildren()) {
            guiObjects.add((SelectableVersion)obj);
        }
        return guiObjects;
    }

    float position = 0;
    boolean holdingScroll = false;
    public void update() {
        //float scroll = (float)(-Mouse.getDWheel())/1000;
        float viewportHeight = DisplayManager.getDefaultHeight() - (69 * 2);
        float contentHeight = 72 * (getGUIChildren().size());

        if(contentHeight <= viewportHeight) {
            return;
        }

//        if (scroll < 0) {
//            if (position - scroll > 0) {
//                scroll = position;
//            }
//            position -= scroll;
//        }
//
        float maxPosition = -((contentHeight) / viewportHeight);
//        //float maxPosition = -2.3999996f;
//
//        if (scroll > 0) {
//            if (position - scroll < maxPosition){
//                scroll = -(maxPosition - position);
//                position = maxPosition;
//            } else {
//                position -= scroll;
//            }
////            System.out.println(-(((contentHeight - 72) - viewportHeight) / viewportHeight));
////            System.out.println(maxPosition);
////            System.out.println(position);
////            System.out.println(scroll);
//        }
//
//        for(SelectableVersion child : getVersions()) {
//            child.update();
//            child.translate(new Vector3f(0f, scroll, 0f));;
//        }
//
//        scrollBar.setLocalPosition(new Vector3f(0, -DisplayManager.scaledHeight(((position * (viewportHeight - (viewportHeight / contentHeight) * viewportHeight)) / maxPosition) / DisplayManager.getDefaultHeight()) * 2, 0));
//
//        double scale = 1 - (DisplayManager.getScale() - 1);

        int x = Mouse.getX();
        int y = Mouse.getY();

        Vector2f scrollBarStart = new Vector2f(
                DisplayManager.scaledWidth((DisplayManager.getDefaultWidth() / 2) + 240) + DisplayManager.getXBuffer(),
                DisplayManager.scaledHeight(DisplayManager.getDefaultHeight() -(69 + (position * (viewportHeight - (viewportHeight / contentHeight) * viewportHeight)) / maxPosition) -(viewportHeight / contentHeight) * viewportHeight)
        );
        Vector2f scrollBarSize = new Vector2f(DisplayManager.scaledWidth(10), (viewportHeight / contentHeight) * viewportHeight);

        // Max Position: -2.7368422
        // Bottom: -2.3999996
        //System.out.println("Position: " + position);
//        System.out.println("Scrollbar Y: " + DisplayManager.scaledHeight((69 + ((position * (viewportHeight - (viewportHeight / contentHeight) * viewportHeight))) / maxPosition) / DisplayManager.getDefaultHeight()));

//        System.out.println(new Vector2f(x, y));
        //System.out.println(scrollBarStart);
//        System.out.println(new Vector2f((scrollBarStart.x + DisplayManager.getXBuffer()), (scrollBarStart.y) + DisplayManager.getYBuffer()));
        //System.out.println(scrollBarSize);
//        System.out.println(new Vector2f(x - (scrollBarStart.x + DisplayManager.getXBuffer()), (y - (DisplayManager.getDefaultHeight() - scrollBarStart.y) - DisplayManager.getYBuffer())));

        boolean mouseIsOver =
               x - (scrollBarStart.x + DisplayManager.getXBuffer()) <= scrollBarSize.x
            && x - (scrollBarStart.x + DisplayManager.getXBuffer()) >= 0
            && y - (scrollBarStart.y) + DisplayManager.getYBuffer() <= scrollBarSize.y
            && y - (scrollBarStart.y) + DisplayManager.getYBuffer() >= 0;

        if(mouseIsOver || holdingScroll) {
            //System.out.println("over!");
            if(Mouse.isButtonDown(0)) {
                if(!holdingScroll) {
                    holdingScroll = true;
                }

//                System.out.println(Mouse.getDY());
                //scrollBar.translate(new Vector3f(0, (Mouse.getDY() * scale) , 0));
                int dy = Mouse.getDY();
                scrollBar.translate(new Vector3f(0, DisplayManager.scaledHeight((float)(dy)) / Display.getHeight() * 2, 0));
                position += DisplayManager.scaledHeight((float)(dy)) / Display.getHeight() * 2;

                LinkedList<SelectableVersion> children = getVersions();

                int scrollOffsetPx = (int)(((-scrollBar.getLocalPosition().y) * DisplayManager.getDefaultHeight()) / 2);
                float scrollOffset = scrollOffsetPx  / (viewportHeight -(viewportHeight / contentHeight) * viewportHeight);
                int contentOffsetPx = (int)(contentHeight * scrollOffset);
                float contentOffset = (((float)contentOffsetPx / DisplayManager.getDefaultHeight()) / 2) * maxPosition;
                position = contentOffset;

                //System.out.println(contentOffsetPx);


                //System.out.println(scrollOffset);

                for (int i = 0; i < children.size(); i++) {
                    children.get(i).setLocalPosition(new Vector3f(0, (((i * DisplayManager.scaledWidth(0)) + contentOffsetPx) / DisplayManager.getDefaultHeight()), 0));
                    //System.out.println(-((float)((i * 72) + contentOffsetPx) / DisplayManager.getDefaultHeight()));
                }
                //System.out.println(DisplayManager.scaledHeight((float)(dy)) / Display.getHeight() * 2);
            } else if(holdingScroll) {
                holdingScroll = false;
            }
        } else if(holdingScroll) {
            holdingScroll = false;
        }

//        if(scroll != 0) {
//            System.out.println(scroll);
//            System.out.println(-(position - scroll) * DisplayManager.getDefaultHeight());
//            System.out.println(72 * getVersions().size());
//        }
    }

    public void resize() {
        for(SelectableVersion child : getVersions()) {
            child.resize();
        }

        background.model.setRawModel(Loader.singleton.loadGUIToVAO(new Vector2f(0, DisplayManager.scaledHeight(69) + DisplayManager.getYBuffer()), new Vector2f(Display.getWidth(), DisplayManager.scaledHeight(DisplayManager.getDefaultHeight() - (69 * 2))), TextureHelper.getYFlippedPlaneTextureCoords(new Vector2f(512, 512), new Vector2f(0, 129), new Vector2f(1, 1))));

        float viewportHeight = DisplayManager.scaledHeight(DisplayManager.getDefaultHeight() - 138);
        float contentHeight = 72 * this.getVersions().size();
        float scrollBarY = DisplayManager.scaledHeight((DisplayManager.getDefaultHeight() - 69) + contentHeight * position) + DisplayManager.getYBuffer();
        scrollBar.model.setRawModel(Loader.singleton.loadGUIToVAO(new Vector2f(DisplayManager.scaledWidth((DisplayManager.getDefaultWidth() / 2) + 240), scrollBarY), new Vector2f(DisplayManager.scaledWidth(10), -(viewportHeight / contentHeight) * viewportHeight), TextureHelper.getPlaneTextureCoords(new Vector2f(512, 512), new Vector2f(1, 129), new Vector2f(1, 1))));
//        scrollBar.model.setRawModel();
    }

    public void render(Renderer renderer, GUIShader shader) {
        renderer.renderGUI(background, shader);

        for(SelectableVersion child : getVersions()) {
            child.render(renderer, shader);
        }

        float viewportHeight = DisplayManager.getDefaultHeight() - (69 * 2);
        float contentHeight = 72 * (getGUIChildren().size());

        if(contentHeight > viewportHeight) {
            renderer.renderGUI(scrollBarBackground, shader);
            renderer.renderGUI(scrollBar, shader);
        }
    }

    public void selectVersion(String path) {
        for(SelectableVersion child : getVersions()) {
            if (child.path.equals(path)) {
                child.focused = true;
            } else {
                child.focused = false;
            }
        }
    }

    public String getSelected() {
        for(SelectableVersion child : getVersions()) {
            if(child.focused) {
                return child.path;
            }
        }
        return null;
    }
}
